from typing import Tuple
from vkbottle.api import API
import requests
from datetime import datetime
from bs4 import BeautifulSoup as BS
from vkbottle.user import User,	Message
from vkbottle.dispatch.rules.base import CommandRule

def days():
	date1 = datetime.now()
	date2 = datetime(day=2, month=6, year=2022)
	countdown = date2 - date1
	n = countdown.days
	days = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
	if n % 10 == 1 and n % 100 != 11:
		p = 0
	elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
		p = 1
	else:
		p = 2
	return str(n) + ' ' + days[p]
ds = 'https://discord.com/invite/HXzE6x4rXN'
token = 'f4a902d8cb04a20a260f6de52c004b3bfba5bbb894062f696eb7ab18ef9328c006a861dc7bd99093f5a7b'

user = User(token)

@user.on.message(CommandRule("stats", ["/", "?"], 1))
async def handler(message: Message, args: Tuple[str]):
	if message.from_id == 183416928:
		await message.answer('poshel naxyi', reply_to=message.id)
	else:
		nick = args[0]
		url = f'https://iccup.com/ru/dota/gamingprofile/{nick}'
		response = requests.get(url)
		Gamingprofile = BS(response.text, 'html.parser')
		text = Gamingprofile.find('div', id = 'main-stata-5x5')
		if text != None:
			Statistics = text.text.replace('\n', '  ').split()
			try:
				main = f"üîÆ –†–ï–ô–¢–ò–ù–ì –∞–∫–∫–∞—É–Ω—Ç–∞\n\n üî∞ –õ–æ–≥–∏–Ω: {nick}\n üîù –ü–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {Statistics[21]}\n üèÜ –†–∞–Ω–∫ (pts): {Statistics[0]}\n " \
					   f"‚öîÔ∏è K/D/A: {Statistics[3]} / {Statistics[5]} / {Statistics[7]}   K {Statistics[9]}\n ‚ùá Win/Lose/Leave: {Statistics[27]} / {Statistics[29]} / {Statistics[31]}\n " \
					   f"üêä –ù–µ–π—Ç—Ä–∞–ª–æ–≤ —É–±–∏—Ç–æ: {Statistics[37]}\n üêî –ö—É—Ä—å–µ—Ä–æ–≤ —É–±–∏—Ç–æ: {Statistics[34]}\n ‚è∞ –ù–∞–ª—ë—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã: {Statistics[40]}\n " \
					   f"üëë –ü–æ–±–µ–¥—ã: {Statistics[42]}\n üí§ –ö–æ–ª-–≤–æ –ª–∏–≤–æ–≤: {Statistics[45]}\n üìä –õ—É—á—à–∏–π —Å—á—ë—Ç: {Statistics[48]} - {Statistics[50]} - {Statistics[52]}\n " \
					   f"üî± –ú–∞–∫—Å. —Å—Ç—Ä–∏–∫ –ø–æ–±–µ–¥: {Statistics[56]}\n ‚öú –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {Statistics[59]}\n " \
					   f"üîµ –î–∏—Å–∫–æ—Ä–¥: {ds}\n\n ‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {days()}\n\n"
			except IndexError:
				main = f"üîÆ **–†–ï–ô–¢–ò–ù–ì –∞–∫–∫–∞—É–Ω—Ç–∞\n\n üî∞ –õ–æ–≥–∏–Ω: {nick}\n üîù –ü–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {Statistics[21]}\n üèÜ –†–∞–Ω–∫ (pts): {Statistics[0]}\n " \
					   f"‚öîÔ∏è K/D/A: {Statistics[3]} / {Statistics[5]} / {Statistics[7]}   K {Statistics[9]}\n ‚ùá Win/Lose/Leave: {Statistics[27]} / {Statistics[29]} / {Statistics[31]}\n " \
					   f"üêä –ù–µ–π—Ç—Ä–∞–ª–æ–≤ —É–±–∏—Ç–æ: {Statistics[37]}\n üêî –ö—É—Ä—å–µ—Ä–æ–≤ —É–±–∏—Ç–æ: {Statistics[34]}\n ‚è∞ –ù–∞–ª—ë—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã: 0\n " \
					   f"üëë –ü–æ–±–µ–¥—ã: {Statistics[43]}\n üí§ –ö–æ–ª-–≤–æ –ª–∏–≤–æ–≤: {Statistics[46]}\n üìä –õ—É—á—à–∏–π —Å—á—ë—Ç: {Statistics[49]}\n " \
					   f"üî± –ú–∞–∫—Å. —Å—Ç—Ä–∏–∫ –ø–æ–±–µ–¥: {Statistics[53]}\n ‚öú –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {Statistics[56]}\n " \
					   f"üîµ –î–∏—Å–∫–æ—Ä–¥: {ds}\n\n ‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {days()}\n\n"
			await message.answer(main, reply_to=message.id)
		else:
			await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_to=message.id)

@user.on.message(CommandRule("last", ["/", "?"], 1))
async def lastgame(message: Message, args: Tuple[str]):
	if message.from_id == 183416928:
		await message.answer('poshel naxyi', reply_to=message.id)
	else:
		try:
			nick = args[0]
			url = f'https://iccup.com/ru/dota/gamingprofile/{nick}'
			response = requests.get(url)
			soup = BS(response.text, 'html.parser')
			games = soup.find('tbody', id = 'result-table').find_all('td', limit=5)
			alls = '–ü–û–°–õ–ï–î–ù–Ø–Ø –ò–ì–†–ê\n\nüë®‚Äçüíª –õ–æ–≥–∏–Ω: {0}\nüßú –ì–µ—Ä–æ–π: {1}\nüëü –ú–æ–¥: {2}\n‚è∞ –í—Ä–µ–º—è: {3}\n‚öîÔ∏è K/D/A: {4}\nüî• –û—á–∫–∏: {5} PTS\n\n‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {6}'.format(nick, games[0].text.replace('\n', ''), games[1].text.replace('\n', ''), games[2].text.replace('\n', ''), games[3].text.replace('\n', ''), games[4].text.replace('\n', ''), days())
			await message.answer(alls, reply_to=message.id)
		except IndexError:
			await message.answer('–ò–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª', reply_to=message.id)

@user.on.message(CommandRule("top", ["/", "?"]))
async def top(message: Message):
	if message.from_id == 183416928:
		await message.answer('poshel naxyi', reply_to=message.id)
	else:
		url = 'https://iccup.com/dota/ladder'
		response = requests.get(url)
		soup = BS(response.text, 'html.parser')
		find_pts_players = soup.find_all('div', class_ ="field2 width70p10", limit=5)
		find_stats_players = soup.find_all('div', class_ ="field2 width80c", limit=5)
		find_wrl_players = soup.find_all('div', class_ ="field2 width80r", limit=5)
		find_players = soup.find_all('div', class_ = 'field2 width210 ladder-flag', limit=5)
		toplist = []
		for i in range(0, 5):
			a = f'#{i+1} ', find_players[i].text.replace('\n', ''), find_pts_players[i].text, find_stats_players[i].text, find_wrl_players[i].text
			a = ' '.join(a)
			toplist.append(a)
		out = f'‚Ññ | –ò–≥—Ä–æ–∫ | –û—á–∫–∏ | –°—Ç–∞—Ç–∞ | –ü–æ–±–µ–¥–∞\n{toplist[0]}\n{toplist[1]}\n{toplist[2]}\n{toplist[3]}\n{toplist[4]}'
		await message.answer(out, reply_to=message.id)

@user.on.message(CommandRule("ladder", ["/", "?"]))
async def ladder(message: Message):
	if message.from_id == 183416928:
		await message.answer('poshel naxyi', reply_to=message.id)
	else:
		url = 'https://iccup.com/dota/teams.html'
		response = requests.get(url)
		GamingProfile = BS(response.text, 'html.parser')
		find_pts_teams = GamingProfile.find_all('div', class_ ="field2 width70", limit=10)
		find_stats_teams = GamingProfile.find_all('div', class_ ="field2 width70c", limit=10)
		find_wrl_teams = GamingProfile.find_all('div', class_ ="field2 width90c", limit=5)
		find_teams = GamingProfile.find_all('div', class_ = 'field2 width200', limit=5)
		toplist = []
		com = [find_stats_teams[n].text + '  '+ find_stats_teams[n+1].text for n in range(0, 10, 2)]
		com2 = [find_pts_teams[j].text for j in range(0,10)]
		del com2[:-1:2]
		for i in range(0, 5):
			a = f'#{i+1} ', find_teams[i].text.replace('\n', ''), ' ', find_wrl_teams[i].text, ' ', com2[i], ' ',com[i]
			a = ' '.join(a)
			toplist.append(a)
		out = f'‚Ññ | –ö–æ–º–∞–Ω–¥–∞ | –ò–≥—Ä–æ–∫–∏ | –°—Ç–∞—Ç–∞ | –ü–æ–±–µ–¥–∞\n{toplist[0]}\n{toplist[1]}\n{toplist[2]}\n{toplist[3]}\n{toplist[4]}'
		await message.answer(out, reply_to=message.id)

@user.on.message(CommandRule("profile", ["/", "?"], 1))
async def profile(message: Message, args: Tuple[str]):
	if message.from_id == 183416928:
		await message.answer('poshel naxyi', reply_to=message.id)
	else:
		try:
			nick = args[0]
			url = f'https://iccup.com/ru/profile/view/{nick}'
			response = requests.get(url)
			Profile = BS(response.text, 'html.parser')
			text = Profile.find('div', class_ = 'allinfo width395')
			mesto = text.find('span', class_="user-flag").find('a').attrs['title']
			p1 = text.find('div', class_ ='infoblock-tbl')
			p3 = p1.find_all(class_ = 'nth-2')
			key = [h.text for h in p3]
			profile = f'üîÆ –ü–†–û–§–ò–õ–¨ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n üë®‚Äçüíª –õ–æ–≥–∏–Ω: {nick}\n üó£ –ù–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è: {key[0]}\n üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {mesto} ({key[1]})\n ' \
			  f'üí¨ –°–∫–∞–π–ø: {key[2]}\n üü£ –î–∏—Å–∫–æ—Ä–¥: {key[3]}\n üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {key[4]}\n üëÄ –í–æ–∑—Ä–∞—Å—Ç: {key[5]}\n ' \
			  f'üñ± –ú—ã—à–∫–∞: {key[6]}\n ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {key[7]}\n üéß –ù–∞—É—à–Ω–∏–∫–∏: {key[8]}\n üå´Ô∏è –ö–æ–≤—Ä–∏–∫: {key[9]}\n\n‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {days()}'
			await message.answer(profile, reply_to=message.id)
		except AttributeError:
			await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_to=message.id)

@user.on.message(CommandRule("last5", ["/", "?"], 1))
async def lastgames(message: Message, args: Tuple[str]):
	if message.from_id == 183416928:
		await message.answer('poshel naxyi', reply_to=message.id)
	else:
		try:
			nick = args[0]
			url = f'https://iccup.com/ru/dota/gamingprofile/{nick}'
			response = requests.get(url)
			Gamingprofile = BS(response.text, 'html.parser')
			games = Gamingprofile.find('tbody', id = 'result-table')
			array2 = [i.text.replace('\n', '  ') for i in games]
			out = f'‚Ññ  |  –ì–µ—Ä–æ–π  |  –ú–æ–¥  |  K/D/A  |  –û—á–∫–∏\n\n1. {array2[1].strip()}\n\n2. {array2[3].strip()}\n\n3. {array2[5].strip()}\n\n4. {array2[7].strip()}\n\n5. {array2[9].strip()}'
			await message.answer(out, reply_to=message.id)
		except IndexError:
			await message.answer('–ò–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª.', reply_to=message.id)

user.run_forever()